<?xml version="1.0" encoding="UTF-8"?>
<project name="${project.name}" default="dist">
	<property file="ant/build.properties" />

	<property name="build.author" value="${user.name}" />

	<description>
		${project.description}
    </description>

	<!-- - - - - - - - - - - - - - - - - - 
          target: init                      
         - - - - - - - - - - - - - - - - - -->
	<target name="init" depends="global-init,ant-init">
	</target>


	<!-- - - - - - - - - - - - - - - - - - 
          target: ant-init                      
         - - - - - - - - - - - - - - - - - -->
	<target name="ant-init">
		<taskdef name="launch4j"
		         classname="net.sf.launch4j.ant.Launch4jTask"
		         classpath="${build.exeWrap.ant}"
		/>

		<taskdef name="findbugs"
		         classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
		         classpath="${build.findBugs.classpath}"
		/>

		<taskdef resource="checkstyletask.properties"
		         classpath="${build.checkstyle.classpath}"
		/>

		<taskdef name="jarbundler"
		         classname="net.sourceforge.jarbundler.JarBundler"
		         classpath="${build.jarbundler.classpath}"
		/>

		<taskdef resource="proguard/ant/task.properties"
		         classpath="${build.proguard.classpath}"
		/>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: global-init                      
         - - - - - - - - - - - - - - - - - -->
	<target name="global-init">
		<tstamp />
	</target>

	<!-- - - - - -  Filesets  - - - - - -->

	<fileset dir="${basedir}/${lib.home}"
	         id="proguard.addLibraries"
	         includes="${build.proguard.addLibs}"
	/>

	<!-- - - - -  Filesets end  - - - - -->

	<!-- ================================= 
          target: dist              
         ================================= -->
	<target name="dist" depends="compile">
		<delete dir="${dist.out}" includeemptydirs="true" failonerror="false" />

		<mkdir dir="${dist.out.all}" />
		<mkdir dir="${dist.include}"/>

		<antcall target="dist-jar" />
		<antcall target="dist-libCopy" />
		<antcall target="dist-proguard" />

		<antcall target="dist-copy" />
		<antcall target="dist-launchers" />
		<antcall target="dist-zip" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: dist-jar                      
         - - - - - - - - - - - - - - - - - -->
	<target name="dist-jar">
		<jar destfile="${dist.jarPath}">
			<manifest>
				<attribute name="Built-By" value="${build.author}" />
				<attribute name="Build-Date" value="${TODAY}" />
				<attribute name="Main-Class" value="${src.main}" />

				<attribute name="Class-Path" value="${libs.project}" />
			</manifest>

			<fileset dir="${build.out}">
				<include name="**/*.class" />
			</fileset>

			<zipfileset dir="${build.resources}" prefix="${build.resources}">
				<include name="**/*.png" />
			</zipfileset>
		</jar>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: os-libCopy          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="os-libCopy">
		<attribute name="os" default="win32" />
		<sequential>
			<copy todir="${dist.@{os}.out}/${lib.home}"
			      flatten="true"
			      includeemptydirs="false"
			>
				<fileset dir="${lib.home}/OS/@{os}">
					<include name="**/*.jar" />
					<exclude name="plugin/**/*" />
					<exclude name="${lib.exclude}" />
				</fileset>
			</copy>

			<copy todir="${dist.@{os}.out}/${lib.home}"
			      flatten="false"
			      includeemptydirs="false"
			>
				<fileset dir="${lib.home}/OS/@{os}">
					<include name="**/*" />
					<exclude name="**/*.jar" />
				</fileset>
			</copy>
		</sequential>
	</macrodef>


	<!-- - - - - - - - - - - - - - - - - - 
          target: dist-libCopy                      
         - - - - - - - - - - - - - - - - - -->
	<target name="dist-libCopy">
		<copy todir="${dist.out.all.proguard}/${lib.home}"
		      flatten="true"
		      includeemptydirs="false"
		>
			<fileset dir="${lib.home}" excludes="${build.proguard.libraries}">
				<include name="**/*.jar" />
				<exclude name="plugin/**/*" />
				<exclude name="OS/**/*" />
				<exclude name="${lib.exclude}" />
			</fileset>
		</copy>

		<copy todir="${dist.out.all.proguard}/${lib.home}"
		      flatten="false"
		      includeemptydirs="false"
		>
			<fileset dir="${lib.home}">
				<include name="**/*" />
				<exclude name="OS/**/*" />
				<exclude name="**/*.jar" />
			</fileset>
		</copy>

		<copy todir="${dist.out.all.normal}/${lib.home}"
		      flatten="true"
		      includeemptydirs="false"
		>
			<fileset dir="${lib.home}" includes="${build.proguard.libraries}">
				<exclude name="plugin/**/*" />
				<exclude name="OS/**/*" />
				<exclude name="${lib.exclude}" />
			</fileset>
		</copy>

		<os-libCopy os="${dist.win32}" />
		<os-libCopy os="${dist.linux}" />
		<os-libCopy os="${dist.macos}" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: dist-proguard                      
         - - - - - - - - - - - - - - - - - -->
	<target name="dist-proguard">
		<mkdir dir="${dist.out.all.proguard}/${lib.home}" />
		<mkdir dir="${dist.out.all.normal}/${lib.home}" />

		<!--
<pathconvert property="build.proguard.inLibraries"
		             pathsep="${path.separator}"
		>
			<path>
				<fileset dir="${dist.out.all.normal}/${lib.home}">
					<include name="**/*.jar" />
				</fileset>
			</path>
		</pathconvert>

		<proguard obfuscate="false">
			<injar location="${dist.jarPath}" />
			<outjar location="${dist.out.all.proguard}/${dist.jarFileName}" />

			<injar path="${build.proguard.inLibraries}" />
			<outjar path="${dist.out.all.proguard}/${lib.home}/temp" />

			<libraryjar path="${java.home}/lib/rt.jar" />
			<libraryjar path="${dist.out.all.proguard}/${lib.home}" />
			<libraryjar refid="proguard.addLibraries" />

			<dontwarn filter="sun.misc.Unsafe" />
			<dontwarn filter="com.google.common.collect.MinMaxPriorityQueue" />

			<keepclasseswithmembers access="public">
				<method access="public static"
				        type="void"
				        name="main"
				        parameters="java.lang.String[]"
				/>
			</keepclasseswithmembers>

			<keepclasseswithmembernames>
				<method access="native" />
			</keepclasseswithmembernames>

			<keepclassmembers extends="java.lang.Enum">
				<method access="public static"
				        type="**[]"
				        name="values"
				        parameters=""
				/>
				<method access="public static"
				        type="**"
				        name="valueOf"
				        parameters="java.lang.String"
				/>
			</keepclassmembers>

			<keepclassmembers implements="java.io.Serializable">
				<field access="static final"
				       type="long"
				       name="serialVersionUID"
				/>
				<field access="static final"
				       type="java.io.ObjectStreamField[]"
				       name="serialPersistentFields"
				/>
				<method access="private"
				        type="void"
				        name="writeObject"
				        parameters="java.io.ObjectOutputStream"
				/>
				<method access="private"
				        type="void"
				        name="readObject"
				        parameters="java.io.ObjectInputStream"
				/>
				<method type="java.lang.Object"
				        name="writeReplace"
				        parameters=""
				/>
				<method type="java.lang.Object"
				        name="readResolve"
				        parameters=""
				/>
			</keepclassmembers>
		</proguard>
-->

		<copy todir="${dist.out.all.proguard}/" flatten="false">
			<fileset dir="${dist.out.all.normal}/">
				<include name="**/*.jar" />
			</fileset>
		</copy>

	</target>


	<!-- - - - - - - - - - - - - - - - - - 
          target: dist-launchers                      
         - - - - - - - - - - - - - - - - - -->
	<target name="dist-launchers">
		<antcall target="dist-win32" />
		<antcall target="dist-macos" />
		<antcall target="dist-linux" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: dist-exe                      
         - - - - - - - - - - - - - - - - - -->
	<target name="dist-win32">
		<mkdir dir="${dist.win32.out}" />
		<launch4j>
			<config headerType="console"
			        outfile="${dist.win32.out}/${build.exeWrap.exe}"
			        dontWrapJar="true"
			        jarPath="${dist.jarFileName}"
			        downloadurl="http://java.com/download"
			        stayalive="true"
			        cmdline="${build.cmdLine}"
			        icon="${build.resources.applicationIcon}.ico"
			>
				<jre minVersion="1.6.0">
				</jre>
				<versionInfo copyright="${project.copyright}"
				             fileDescription="${project.description}"
				             fileVersion="${project.strictVersion}"
				             internalName="${project.name}"
				             originalFilename="${build.exeWrap.exe}"
				             productName="${project.fullName}"
				             txtFileVersion="${project.version}"
				             productVersion="${project.strictVersion}"
				             txtProductVersion="${project.version}"
				/>
			</config>
		</launch4j>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: dist-bundle                      
         - - - - - - - - - - - - - - - - - -->
	<target name="dist-macos">
		<mkdir dir="${dist.macos.out}" />

		<jarbundler dir="${dist.macos.out}"
		            name="${project.name}"
		            mainclass="${src.main}"
		            jar="${dist.jarPath}"
		            arguments="${build.cmdLine}"
		            build="${project.version}"
		            infostring="${project.description}"
		            jvmversion="1.6+"
		            version="${project.strictVersion}"
		            shortname="${project.name}"
		            stubfile="${build.jarbundler.stubFile}"
		            icon="${build.resources.applicationIcon}.png"
		>

		</jarbundler>
	</target>
	<!-- - - - - - - - - - - - - - - - - - 
          target: dist-linux                      
         - - - - - - - - - - - - - - - - - -->
	<target name="dist-linux">
		<mkdir dir="${dist.linux.out}" />

		<echo file="${dist.linux.out}/${project.name}.sh">#!/bin/sh
java -jar ${dist.jarFileName} ${build.cmdLine}</echo>
	</target>


	<!-- - - - - - - - - - - - - - - - - - 
          target: dist-copy                      
         - - - - - - - - - - - - - - - - - -->
	<target name="dist-copy">
		<copy includeemptydirs="true" todir="${dist.out.all.proguard}">
			<fileset dir="${dist.include}">
				<include name="**/*" />
			</fileset>
		</copy>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: zip-create          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="zip-create">
		<attribute name="os" default="win32" />
		<sequential>
			<zip destfile="${dist.zip.folder}/${dist.zip.name}-@{os}.zip">
				<zipfileset dir="${dist.out.all.proguard}"
				            prefix="${project.name}/"
				>
					<include name="**/*" />
				</zipfileset>
				<zipfileset dir="${dist.@{os}.out}" prefix="${project.name}/">
					<include name="**/*" />
				</zipfileset>
			</zip>
		</sequential>
	</macrodef>


	<!-- - - - - - - - - - - - - - - - - - 
          target: dist-zip                      
         - - - - - - - - - - - - - - - - - -->
	<target name="dist-zip">
		<delete dir="${dist.zip.folder}" />

		<zip-create os="${dist.win32}" />
		<zip-create os="${dist.macos}" />
		<zip-create os="${dist.linux}" />
	</target>

	<!-- ================================= 
          target: codeAnalysis              
         ================================= -->
	<target name="codeAnalysis" description="Generates code analysis reports">
		<echo>Running code analysis</echo>

		<mkdir dir="${build.codeAnalysis.dir}" />

		<antcall target="ca-findBugs" />
		<antcall target="ca-checkstyle" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: ca-finBugs                      
         - - - - - - - - - - - - - - - - - -->
	<target name="ca-findBugs">
		<findbugs home="${build.findBugs}"
		          output="xml"
		          outputFile="${build.findBugs.out}"
		>
			<auxClasspath path="${project.classpath}" />
			<sourcePath path="${build.findBugs.srcPaths}" />
			<class location="${build.out}" />
		</findbugs>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: ca-checkstyle                      
         - - - - - - - - - - - - - - - - - -->
	<target name="ca-checkstyle">
		<checkstyle config="${build.checkstyle.config}"
		            classpath="${project.classpath}"
		            failonviolation="false"
		>
			<fileset dir="${build.subs.dir}" includes="**/*.java" />
			<formatter type="xml" toFile="${build.checkstyle.out}" />
		</checkstyle>
	</target>

	<!-- ================================= 
          target: clean              
         ================================= -->
	<target name="clean"
	        depends="init"
	        description="Deletes all files created by previous builds"
	>

		<delete includeemptydirs="true" quiet="true">
			<fileset dir="${build.root}" />
		</delete>
		<delete dir="${build.root}" quiet="true" />

	</target>

	<!-- ================================= 
          target: compile              
         ================================= -->
	<target name="compile"
	        depends="compile-setup"
	        description="Compiles the sources"
	>
		<javac destdir="${build.out}"
		       classpath="${project.classpath}"
		       debug="true"
		       optimize="true"
		       includeantruntime="true"
		>
			<src path="${build.subs.dir}" />
		</javac>

		<antcall target="codeAnalysis" />

	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: compile-setup                      
         - - - - - - - - - - - - - - - - - -->
	<target name="compile-setup" depends="classpath-setup,compile-substitution">
		<mkdir dir="${build.out}" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: compile-substitution                      
         - - - - - - - - - - - - - - - - - -->
	<target name="compile-substitution">
		<delete dir="${build.subs.dir}" quiet="true" failonerror="false" />

		<copy todir="${build.subs.dir}">
			<fileset dir="${src.home}">
				<include name="**/*.java" />
			</fileset>

			<filterchain>
				<filterreader classname="org.apache.tools.ant.filters.ReplaceTokens"
				>
					<param type="propertiesfile" value="${build.subs.config}" />
				</filterreader>

				<expandproperties />
			</filterchain>
		</copy>
	</target>


	<!-- - - - - - - - - - - - - - - - - - 
          target: classpath-setup                      
         - - - - - - - - - - - - - - - - - -->
	<target name="classpath-setup" depends="init">
		<pathconvert property="project.classpath" pathsep="${path.separator}">

			<path>
				<!-- lib.home contains all jar files, in several subdirectories -->
				<fileset dir="${lib.home}">
					<include name="**/*.jar" />
					<exclude name="plugins" />
				</fileset>
			</path>
		</pathconvert>

		<pathconvert property="libs.project" pathsep=" ">
			<mapper>
				<chainedmapper>

					<!-- remove absolute path -->
					<flattenmapper />

					<!-- add lib/ prefix -->
					<globmapper from="*" to="lib/*" />
				</chainedmapper>
			</mapper>

			<path>
				<!-- lib.home contains all jar files, in several subdirectories -->
				<fileset dir="${lib.home}">
					<include name="**/*.jar" />
					<exclude name="plugins" />
					<exclude name="${lib.exclude}" />
				</fileset>
			</path>
		</pathconvert>
	</target>
</project>
